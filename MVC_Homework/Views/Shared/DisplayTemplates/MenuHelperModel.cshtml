@model MvcSiteMapProvider.Web.Html.Models.MenuHelperModel
@using System.Web.Mvc.Html
@using MvcSiteMapProvider.Web.Html.Models


@functions 
{
    bool CanShow(SiteMapNodeModel node)
    {
        
        return node.Attributes.ContainsKey("visible") && Boolean.Parse(node.Attributes["visible"].ToString()) &&
               (!node.Attributes.ContainsKey("roles") || node.Attributes["roles"].ToString().Split(',').Any(role => Context.User.IsInRole(role)));
    }
}

<ul id="menu" class="nav navbar-nav side-nav">
    @foreach (var node in Model.Nodes)
    {
        if (CanShow(node))
        {
            if (node.Children.Any(CanShow))
            {
                <li class="dropdown">
                    <a href="#" class="dropdown-toggle" data-toggle="dropdown"><i class="fa fa-envelope"></i> <b class="caret"></b></a>
                    <ul class="dropdown-menu message-dropdown">

                    </ul>
                </li>
            }
            else
            {
                <li class="@(node.IsInCurrentPath ? "active" : "")">
                    @Html.DisplayFor(m => node)
                </li>
            }

                @*<li>
                    @Html.DisplayFor(m => node)
                    @if (node.Children.Any())
                    {
                        @Html.DisplayFor(m => node.Children)
                    }
                </li>*@
        }
    }
</ul>